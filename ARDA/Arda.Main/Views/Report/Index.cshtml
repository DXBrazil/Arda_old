<section class="concontainer-fluid">
    <div class="col-xs-12">
        <div class="row">
            <header class="ctn-header-dashboard">
                <div class="col-xs-12 col-lg-3 col-md-6">
                    <h2>Reports</h2>
                </div>
                <div class="col-xs-12 col-lg-3 col-md-6">
                    <label for="dataRange">Date Range:</label>
                    <input class="form-control" type="text" id="dataRange" value="01/01/2015 - 01/31/2015" />
                </div>
                <div class="col-xs-12 col-lg-3 col-md-6">
                    <label for="WBUsers">Users:</label>
                    <select class="form-control" id="WBUsers" name="WBUsers"></select>
                </div>
                
                <div class="col-xs-12 col-lg-3 col-md-6">
                    <div class="data-sorting-buttons">
                        <button class="btn btn-default" id="btnFilter">Filter</button>
                    </div>
                </div>
                <div class="clearfix"></div>
            </header>
            <div id="ActivityConsumingRow" hidden>
                <h3 style="margin-left:20px">Activity Consuming</h3>
                <div class="col-md-4">
                    <div id="chart" class="chart"></div>
                </div>
                <div class="col-md-6">
                    <table id="ActivityConsuming" style="width:500px; margin-top:200px;" class="table-striped"></table>
                </div>
            </div>
        </div>
    </div>
</section>

@*<div id="series_chart_div" style="width: 900px; height: 500px;"></div>*@

@*<script type="text/javascript">
          google.charts.load('current', {'packages':['corechart']});
          google.charts.setOnLoadCallback(drawSeriesChart);

        function drawSeriesChart() {

          var data = google.visualization.arrayToDataTable([
            ['ID', 'Life Expectancy', 'Fertility Rate', 'Region',     'Population'],
            ['CAN',    80.66,              1.67,      'North America',  33739900],
            ['DEU',    79.84,              1.36,      'Europe',         81902307],
            ['DNK',    78.6,               1.84,      'Europe',         5523095],
            ['EGY',    72.73,              2.78,      'Middle East',    79716203],
            ['GBR',    80.05,              2,         'Europe',         61801570],
            ['IRN',    72.49,              1.7,       'Middle East',    73137148],
            ['IRQ',    68.09,              4.77,      'Middle East',    31090763],
            ['ISR',    81.55,              2.96,      'Middle East',    7485600],
            ['RUS',    68.6,               1.54,      'Europe',         141850000],
            ['USA',    78.09,              2.05,      'North America',  307007000]
          ]);

          var options = {
            title: 'Correlation between life expectancy, fertility rate ' +
                   'and population of some world countries (2010)',
            hAxis: { title: 'Region' },
            vAxis: {title: 'Fertility Rate'},
            bubble: {textStyle: {fontSize: 11}}
          };

          var chart = new google.visualization.BubbleChart(document.getElementById('series_chart_div'));
          chart.draw(data, options);
        }
    </script>*@

<script>
    d3.util = d3.util || {};

    d3.util.wrap = function (_wrapW) {
        return function (d, i) {
            var that = this;

            function tspanify() {
                var lineH = this.node().getBBox().height;
                this.text('')
                    .selectAll('tspan')
                    .data(lineArray)
                    .enter().append('tspan')
                    .attr({
                        x: 0,
                        y: function (d, i) { return (i + 1) * lineH; }
                    })
                    .text(function (d, i) { return d.join(' '); })
            }

            function checkW(_text) {
                var textTmp = that
                    .style({ visibility: 'hidden' })
                    .text(_text);
                var textW = textTmp.node().getBBox().width;
                that.style({ visibility: 'visible' }).text(text);
                return textW;
            }

            var text = this.text();
            var parentNode = this.node().parentNode;
            var textSplitted = text.split(' ');
            var lineArray = [[]];
            var count = 0;
            textSplitted.forEach(function (d, i) {
                if (checkW(lineArray[count].concat(d).join(' '), parentNode) >= _wrapW) {
                    count++;
                    lineArray[count] = [];
                }
                lineArray[count].push(d)
            });

            this.call(tspanify)
        }
    };
</script>
<script>
    var startDate;
    var endDate;

    $(function () {
        Initialize()
        
        //Initial Params:
        startDate = '01/01/2016';
        endDate = '06/23/2016';
        //endDate = getToday();
        user = "All"

        //Get User:
        $.getJSON('/users/GetUsers', null, callbackGetUsers);
        //Get Activity Table:
        loadActivityConsumingTable(startDate, endDate, user)
        //Create Activity Bubble Chart:
        createActivityConsumingBubbleChart(600, startDate, endDate, user);
    });

    function Initialize() {
        var today = getToday();

        //Components:
        $('#dataRange').daterangepicker(
        {
            locale: {
                format: 'DD/MM/YYYY'
            },
            startDate: '01/01/2016',
            endDate: today,
            maxDate: today,
        }, function (start, end, label) {
            startDate = start.format('MM/DD/YYYY');
            endDate = end.format('MM/DD/YYYY');
            //startDate = start.format('DD/MM/YYYY');
            //endDate = end.format('DD/MM/YYYY');
        });

        $('#btnFilter').click(filterData)
    }

    function callbackGetUsers(data) {
        var options = [];
        var select = $('#WBUsers');
        options.push('<option value="All">All</option>');
        for (var i = 0; i < data.length; i++) {
            var text = data[i].Name;
            var key = data[i].UniqueName;
            options.push('<option value="' + key + '">' + text + '</option>');
        }
        select.html(options.join(''));
    }

    function loadActivityConsumingTable(startDate, endDate, user) {
        $.getJSON('/report/GetActivityConsumingTableData?startDate=' + startDate + '&endDate=' + endDate + '&user=' + user, null, callbackGetActivityConsumingTableData);
    }

    function createActivityConsumingBubbleChart(diameter, startDate, endDate, user) {
        var url = 'Report/GetActivityConsumingBubbleData?startDate=' + startDate + '&endDate=' + endDate + '&user=' + user;
        //var url = 'https://gist.githubusercontent.com/mbostock/1093025/raw/490fffd1ae637d3275aa9eaa8b0487147717dd40/flare.json';

        var diameter = diameter,
            format = d3.format(",d"),
            color = d3.scale.category20c();

        var x = d3.scale.ordinal()
    .rangeRoundBands([0, '100px'], .1, .3);

        var bubble = d3.layout.pack()
            .sort(null)
            .size([diameter, diameter])
            .padding(1.5);

        var svg = d3.select("#chart").append("svg")
            .attr("width", diameter)
            .attr("height", diameter)
            .attr("class", "bubble");

        d3.json(url, function (error, root) {
            if (error) throw error;

            var node = svg.selectAll(".node")
                .data(bubble.nodes(classes(root))
                .filter(function (d) { return !d.children; }))
              .enter().append("g")
                .attr("class", "node")
                .call(wrap, x.rangeBand())
                .attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; });

            node.append("title")
                .text(function (d) { return d.className + ": " + format(d.value); })
                .call(d3.util.wrap(wrapWidth));

            node.append("circle")
                .attr("r", function (d) { return d.r; })
                .style("fill", function (d) { return color(d.packageName); });

            node.append("text")
                .attr("dy", ".3em")
                .attr('style', 'word-wrap: break-word; text-align:center; text-anchor: middle;')
                .text(function (d) { return d.className.substring(0, d.r / 3); });
        });

        function wrap(text, width) {
            text.each(function () {
                var text = d3.select(this),
                    words = text.text().split(/\s+/).reverse(),
                    word,
                    line = [],
                    lineNumber = 0,
                    lineHeight = 1.1, // ems
                    y = text.attr("y"),
                    dy = parseFloat(text.attr("dy")),
                    tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
                while (word = words.pop()) {
                    line.push(word);
                    tspan.text(line.join(" "));
                    if (tspan.node().getComputedTextLength() > width) {
                        line.pop();
                        tspan.text(line.join(" "));
                        line = [word];
                        tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
                    }
                }
            });
        }

        function type(d) {
            d.value = +d.value;
            return d;
        }

        // Returns a flattened hierarchy containing all leaf nodes under the root.
        function classes(root) {
            var classes = [];

            function recurse(name, node) {
                if (node.children) node.children.forEach(function (child) { recurse(node.name, child); });
                else classes.push({ packageName: name, className: node.name, value: node.size });
            }

            recurse(null, root);
            return { children: classes };
        }

        d3.select(self.frameElement).style("height", diameter + "px");
    }

    function callbackGetActivityConsumingTableData(data) {
        var table = $("#ActivityConsuming");

        var caption = $('<caption/>').text('Time Consuming: Activities');
        table.append(caption);

        var row = $("<tr/>");
        row.append($("<th/>").text('Activity'));
        row.append($("<th/>").text('Hours'));
        row.append($("<th/>").text('%'));
        table.append(row);

        $.each(data, function (rowIndex, r) {
            var row = $("<tr/>");
            $.each(r, function (colIndex, c) {
                var text = ''
                switch (colIndex) {
                    case 0:
                        text = data[i].Activity;
                        break;
                    case 1:
                        text = data[i].Hours;
                        break;
                    case 2:
                        text = data[i].Percent;
                        break;
                }
                row.append($("<td/>").text(c));
            });
            table.append(row);
        });
        $('#ActivityConsumingRow').fadeIn();
    }

    function filterData() {
        $('#chart').html('');
        $('#ActivityConsuming').html('');

        user = $('#WBUsers').val();
        //Get Activity Table:
        loadActivityConsumingTable(startDate, endDate, user)
        //Create Activity Bubble Chart:
        createActivityConsumingBubbleChart(600, startDate, endDate, user);
    }

    function getToday() {
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1; //January is 0!
        var yyyy = today.getFullYear();

        if (dd < 10) {
            dd = '0' + dd
        }

        if (mm < 10) {
            mm = '0' + mm
        }

        today = dd + '/' + mm + '/' + yyyy;
        return today;
    }
</script>
